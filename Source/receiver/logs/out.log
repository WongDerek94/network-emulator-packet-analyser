[INFO][2020-12-3 11:9:12] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:12] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 11:9:12] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:12] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:16] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:17] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:18] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:19] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:20] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:21] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 11:9:22] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:22] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 11:9:22] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:22] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:23] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:24] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:26] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:27] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:30] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:32] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:32] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:32] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:33] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:34] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 11:9:35] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:35] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:36] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:37] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 11:9:38] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:38] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 11:9:38] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:38] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 11:9:38] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:38] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:39] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 11:9:40] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 11:9:40] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:14] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:14] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:1:14] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:14] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:17] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:18] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:19] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:20] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:1:21] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:22] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:23] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:1:24] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:24] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:1:24] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:24] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:1:24] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:24] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:25] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:1:26] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:26] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:1:28] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:1:28] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:14] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:15] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:2:16] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:16] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:2:16] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:16] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:2:16] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:16] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:17] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:17] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:18] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:19] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:20] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:21] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:22] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:2:23] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:23] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:24] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:25] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:25] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:2:26] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:26] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:2:26] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:26] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:27] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:28] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:29] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:30] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:31] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:2:32] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:32] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:2:32] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:2:32] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:2:32] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:2:32] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:2] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:3] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:4] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:5] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:3:6] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:6] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:7] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:3:8] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 13,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:8] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 13,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:9] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:10] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:3:10] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:10] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:12] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:13] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:14] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:15] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:16] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:16] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:16] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:3:18] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:18] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:3:20] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:3:20] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:3:20] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:3:20] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:4:59] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:2] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:3] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:4] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:5] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:6] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:8] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:10] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:5:11] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:11] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:5:11] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:11] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:12] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:5:13] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:13] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:14] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:15] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:16] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:18] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:19] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:21] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:5:23] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:23] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:5:23] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:23] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:5:23] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:23] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:57] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:58] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:5:59] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:0] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:1] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:3] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:3] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:3] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:4] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:5] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:5] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:5] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:6] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:7] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:7] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:8] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:9] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:6:10] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:10] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:6:10] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:10] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:12] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:13] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:14] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:17] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:19] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:6:20] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:6:20] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:36] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:37] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:38] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:39] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:40] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:42] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:43] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:7:44] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:44] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:7:44] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:44] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:7:44] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:44] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:45] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:46] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:47] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:48] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:49] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:7:51] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:51] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:7:51] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:51] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:7:51] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:51] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:56] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:57] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 14,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:7:59] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:2] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:8:3] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:3] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:30] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:32] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:33] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:34] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:36] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:37] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:8:38] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:38] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:8:38] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:38] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:41] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:41] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:42] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:8:43] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:43] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:8:43] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:43] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:44] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:45] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:46] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:49] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:51] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:8:52] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:52] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:53] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:8:54] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:54] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:55] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:57] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:8:58] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:58] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:8:58] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:8:58] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:8:59] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:8:59] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:15] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:16] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:15:17] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:17] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:15:17] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:17] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:15:17] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:17] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:18] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:19] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:20] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:21] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:23] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:23] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:23] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:24] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:25] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:25] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:25] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:26] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:27] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:27] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:27] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:27] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:28] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:29] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:30] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:15:32] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:32] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:37] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:38] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:15:39] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:39] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:15:39] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:39] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:40] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:15:41] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:41] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:15:41] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:41] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:15:41] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:41] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:42] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:15:43] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:15:43] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:15:43] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:43] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:15:43] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:15:43] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:5] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:5] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:7] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:8] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:9] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:10] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:11] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:16:12] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:12] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:13] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:14] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:15] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:16] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:17] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:18] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:19] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:20] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:21] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:22] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:23] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:24] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:25] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:27] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:16:29] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:29] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:16:29] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:29] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:16:29] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:16:29] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:16:30] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:30] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:16:58] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:0] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:0] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:17:2] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:2] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:17:2] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:2] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:17:3] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:3] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:17:3] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:3] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:5] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:17:6] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:6] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:17:6] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:6] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:7] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:8] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:9] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:10] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:11] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:12] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:14] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:16] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:17] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:18] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:19] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:20] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:17:21] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:21] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:17:21] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:21] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:22] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:17:23] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:23] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:17:23] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:23] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:24] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:17:25] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:25] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:17:25] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:25] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:26] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:17:45] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:46] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:47] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:17:48] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:48] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:17:48] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:48] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:17:49] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:49] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:17:49] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:49] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:17:49] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:49] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:50] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 13,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:54] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:54] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:17:55] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:55] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:17:55] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:55] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:17:57] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:57] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:17:58] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:58] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:17:58] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:17:58] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:0] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:1] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:18:2] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:2] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:18:2] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:2] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:3] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:18:4] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:4] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:5] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:6] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:7] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:8] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:11] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:18:12] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:12] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:18:12] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:12] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:13] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:18:14] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:18:14] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:18:15] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:18:15] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:3] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:4] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:19:5] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:6] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:19:6] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:6] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:19:6] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:6] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:7] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:8] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:9] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:19:10] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:10] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:19:10] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:10] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:11] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:12] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:13] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:14] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:16] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:16] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:17] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:19] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:20] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:19:21] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:21] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:24] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:26] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:26] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:27] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:28] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:29] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:30] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:19:31] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:19:31] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:19:32] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:19:32] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:43] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:43] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:22:43] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:43] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:46] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:47] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:48] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:49] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:50] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:52] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:53] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:54] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:56] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:22:57] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:57] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:22:59] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:22:59] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:23:0] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:0] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:2] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:4] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:5] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:6] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:8] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:23:9] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:23:9] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:38] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:38] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:43:38] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:38] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:41] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:43:42] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:42] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:43] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:44] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:45] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:47] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:48] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:49] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:51] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:43:52] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:52] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:54] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:43:56] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:56] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:57] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:43:58] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:58] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:43:58] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:43:58] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:43:59] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:0] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:1] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:3] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:44:4] received EOT packet
{
    packetType: EOT,
    seqNum: -1225094944,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:44:4] terminating receiver...
{
    packetType: EOT,
    seqNum: -1225094944,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:51:6] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:51:6] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:51:9] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:51:9] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:51:14] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:51:14] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:54:27] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:27] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 13:54:28] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:28] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:54:30] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:30] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:54:34] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:34] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 13:54:34] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:34] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 13:54:34] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:34] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:39] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:39] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:39] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:44] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:49] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:51] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:54:52] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:52] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:54:53] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:54:54] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:54] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 13:54:55] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:55] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 13:54:55] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:55] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:54:55] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:55] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:54:57] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:57] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 13:54:57] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:57] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:54:59] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:54:59] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:55:8] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:8] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:55:13] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:13] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 13:55:13] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:13] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 13:55:14] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:14] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 13:55:14] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:14] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:55:19] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:19] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 13:55:19] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:19] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:24] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:24] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:24] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:29] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:34] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 13:55:36] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:36] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:40] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:40] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:43] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:43] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:43] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 13:55:44] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:44] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:45] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 13,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 13,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:46] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 13:55:47] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 13:55:47] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 13:55:47] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 13:55:47] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:30] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:30] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 23:29:30] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:30] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:33] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:34] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:35] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:36] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:37] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:38] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 23:29:38] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:38] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 23:29:39] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:39] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:40] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:41] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:42] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:43] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:29:44] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:21] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:21] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 23:30:23] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:23] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 23:30:23] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:24] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:25] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:27] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 23:30:28] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:28] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 23:30:28] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:28] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:29] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 23:30:39] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:39] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 23:30:39] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:39] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 23:30:39] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:39] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:44] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:49] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:50] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:51] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:52] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:52] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 23:30:53] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:53] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:54] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:54] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 23:30:55] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:55] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 23:30:55] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:55] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 23:30:55] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:55] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:56] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 23:30:57] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:57] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:58] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 23:30:59] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:59] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 23:30:59] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:30:59] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 23:32:35] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:36] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 23:32:36] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:36] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 23:32:36] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:36] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 23:32:36] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:36] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 23:32:37] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:37] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 23:32:38] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:38] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:32:38] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:38] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:39] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:41] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:42] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:32:58] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:58] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:32:59] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:1] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:2] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:3] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:4] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:5] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:20] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:20] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-3 23:33:20] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:20] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-3 23:33:20] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:21] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:22] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:23] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:24] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:43] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:46] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:46] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:46] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:47] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-3 23:33:50] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:50] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-3 23:33:50] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:50] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:51] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-3 23:33:52] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:52] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-3 23:33:52] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:52] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:53] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:54] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:55] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:33:58] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:58] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:33:59] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-3 23:34:2] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:34:2] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-3 23:34:2] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:2] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:3] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-3 23:34:4] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:4] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:6] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:7] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-3 23:34:8] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:8] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:9] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:10] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-3 23:34:13] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-3 23:34:13] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-3 23:34:14] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-3 23:34:14] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:6] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:6] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-4 9:16:6] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:6] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-4 9:16:8] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:8] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:9] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:10] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:11] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:12] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 18,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:13] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:14] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 18,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:16:14] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 18,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:14] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:15] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:16:16] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:12] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:14] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:14] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:15] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-4 9:17:16] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:16] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:17] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 5,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:17] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 5,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 5,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:19] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:20] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:44] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-4 9:17:49] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:49] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-4 9:17:54] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:54] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-4 9:17:54] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:54] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-4 9:17:54] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:54] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 3,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 3,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 3,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:17:59] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:0] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:1] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:2] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-4 9:18:22] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:22] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-4 9:18:22] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:22] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-4 9:18:27] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:27] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:32] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:33] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:35] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:35] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:35] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:36] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 9,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 9,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:37] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:38] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:38] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:39] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 10,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:40] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:41] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 10,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:18:41] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 10,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:18:41] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:22] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:25] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:28] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:28] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:31] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:32] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:33] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:34] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:35] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:37] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:38] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 14,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 14,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:40] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:41] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:42] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:43] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-4 9:19:46] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:46] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-4 9:19:50] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:50] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 6,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:51] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:56] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 6,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:19:56] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 6,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:56] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 7,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:19:57] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:0] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 7,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:0] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 7,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:0] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:1] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:2] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:3] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:4] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-4 9:20:7] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:7] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-4 9:20:7] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:7] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-4 9:20:7] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:7] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:8] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:11] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-4 9:20:12] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:12] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-4 9:20:12] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:12] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-4 9:20:13] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:13] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:33] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:33] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] received DATA (seqNum: 1)
{
    packetType: DATA,
    seqNum: 1,
    data: BEGIN,
    windowSize: 1,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:35] sent ACK packet (ackNum: 1)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 1,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] received DATA (seqNum: 2)
{
    packetType: DATA,
    seqNum: 2,
    data: Final Project:,
    windowSize: 1,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] sent ACK packet (ackNum: 2)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 1,
    ackNum: 2,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] received DATA (seqNum: 3)
{
    packetType: DATA,
    seqNum: 3,
    data: Due: December 2, 2020 at 1000 hrs. Late submissions will not be accepted. ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] sent ACK packet (ackNum: 3)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 3,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] received DATA (seqNum: 4)
{
    packetType: DATA,
    seqNum: 4,
    data: ,
    windowSize: 2,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] sent ACK packet (ackNum: 4)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 2,
    ackNum: 4,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] received DATA (seqNum: 5)
{
    packetType: DATA,
    seqNum: 5,
    data: You may work in groups of two. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:35] sent ACK packet (ackNum: 5)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 5,
    retransmit: false,
}
[INFO][2020-12-4 9:20:36] received DATA (seqNum: 6)
{
    packetType: DATA,
    seqNum: 6,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:36] sent ACK packet (ackNum: 6)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 6,
    retransmit: false,
}
[INFO][2020-12-4 9:20:36] received DATA (seqNum: 8)
{
    packetType: DATA,
    seqNum: 8,
    data: The objective of this project is to design and implement a basic Send-And-Wait protocol ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:36] sent ACK packet (ackNum: 8)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 8,
    retransmit: false,
}
[INFO][2020-12-4 9:20:37] received DATA (seqNum: 7)
{
    packetType: DATA,
    seqNum: 7,
    data: Objective: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:37] sent ACK packet (ackNum: 7)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 7,
    retransmit: false,
}
[INFO][2020-12-4 9:20:37] received DATA (seqNum: 9)
{
    packetType: DATA,
    seqNum: 9,
    data: simulator. The protocol will be half-duplex and use sliding windows to send multiple ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:37] sent ACK packet (ackNum: 9)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 9,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] received DATA (seqNum: 10)
{
    packetType: DATA,
    seqNum: 10,
    data: packets between to hosts on a LAN with an “unreliable network” between the two hosts. ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] sent ACK packet (ackNum: 10)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 10,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] received DATA (seqNum: 11)
{
    packetType: DATA,
    seqNum: 11,
    data: The following diagram depicts the model: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] sent ACK packet (ackNum: 11)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 11,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] received DATA (seqNum: 12)
{
    packetType: DATA,
    seqNum: 12,
    data: ,
    windowSize: 4,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] sent ACK packet (ackNum: 12)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 4,
    ackNum: 12,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] received DATA (seqNum: 13)
{
    packetType: DATA,
    seqNum: 13,
    data: Your Mission: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] sent ACK packet (ackNum: 13)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 13,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] received DATA (seqNum: 14)
{
    packetType: DATA,
    seqNum: 14,
    data: • You may use any language of your choice to implement the three components shown ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:38] sent ACK packet (ackNum: 14)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 14,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 15)
{
    packetType: DATA,
    seqNum: 15,
    data: in the diagram above. It is strongly recommended that you use your code from the ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 15)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 15,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 16)
{
    packetType: DATA,
    seqNum: 16,
    data: first assignment to implement the peer stations.  ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 16)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 16,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 17)
{
    packetType: DATA,
    seqNum: 17,
    data: ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 17)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 17,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 18)
{
    packetType: DATA,
    seqNum: 18,
    data: • You will be designing an application layer protocol, in this case on top of UDP (in ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 18)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 18,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 19)
{
    packetType: DATA,
    seqNum: 19,
    data: keeping with the wireless channel model). The protocol should be able to handle ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 19)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 19,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] received DATA (seqNum: 20)
{
    packetType: DATA,
    seqNum: 20,
    data: network errors such as packet loss and duplicate packets. You will implement ,
    windowSize: 8,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:39] sent ACK packet (ackNum: 20)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 8,
    ackNum: 20,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] received DATA (seqNum: 21)
{
    packetType: DATA,
    seqNum: 21,
    data: timeouts and ACKs to handle retransmissions due to lost packets (ARQ). ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] sent ACK packet (ackNum: 21)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 21,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] received DATA (seqNum: 22)
{
    packetType: DATA,
    seqNum: 22,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] sent ACK packet (ackNum: 22)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 22,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] received DATA (seqNum: 24)
{
    packetType: DATA,
    seqNum: 24,
    data: sent. This means that transmitter will send the packets to the network emulator ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:40] sent ACK packet (ackNum: 24)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 24,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 25)
{
    packetType: DATA,
    seqNum: 25,
    data: which in turn will forward them to the receiver. The receiver in turn will send ACKs ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 25)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 25,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 26)
{
    packetType: DATA,
    seqNum: 26,
    data: back to the transmitter via the network emulator.,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 26)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 26,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 27)
{
    packetType: DATA,
    seqNum: 27,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 27)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 27,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 29)
{
    packetType: DATA,
    seqNum: 29,
    data: which will randomly discard packets (and ACKs as well) to achieve a specified bit ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 29)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 29,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 30)
{
    packetType: DATA,
    seqNum: 30,
    data: error rate. This can be specified as part of command line arguments.  ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 30)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 30,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 31)
{
    packetType: DATA,
    seqNum: 31,
    data: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 31)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 31,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 32)
{
    packetType: DATA,
    seqNum: 32,
    data: • Your overall application architecture will have a minimum of three source modules: ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 32)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 32,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] received DATA (seqNum: 33)
{
    packetType: DATA,
    seqNum: 33,
    data: transmitter, receiver, and network as well as any associated include files and libraries ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:41] sent ACK packet (ackNum: 33)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 33,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] received DATA (seqNum: 34)
{
    packetType: DATA,
    seqNum: 34,
    data: if necessary. For the purposes of simplicity it is recommended that the IP addresses ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] sent ACK packet (ackNum: 34)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 34,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] received DATA (seqNum: 35)
{
    packetType: DATA,
    seqNum: 35,
    data: and of the transmitter, sender and network be extracted from a common ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] sent ACK packet (ackNum: 35)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 35,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] received DATA (seqNum: 36)
{
    packetType: DATA,
    seqNum: 36,
    data: configuration file. The port numbers can also be part of the configuration file. ,
    windowSize: 16,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:42] sent ACK packet (ackNum: 36)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 36,
    retransmit: false,
}
[INFO][2020-12-4 9:20:45] received DATA (seqNum: 23)
{
    packetType: DATA,
    seqNum: 23,
    data: • The network emulator will act as an unreliable channel over with the packets will be ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:45] sent ACK packet (ackNum: 23)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 23,
    retransmit: false,
}
[INFO][2020-12-4 9:20:45] received DATA (seqNum: 28)
{
    packetType: DATA,
    seqNum: 28,
    data: • Your implementation of the network emulator will include a “noise” component ,
    windowSize: 16,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:45] sent ACK packet (ackNum: 28)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 16,
    ackNum: 28,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 37)
{
    packetType: DATA,
    seqNum: 37,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 37)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 37,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 38)
{
    packetType: DATA,
    seqNum: 38,
    data: • One side will be allowed to acquired the channel first and send all of its packets. An ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 38)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 38,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 39)
{
    packetType: DATA,
    seqNum: 39,
    data: End of Transmission (EOT) will indicate that it has completed sending all of its ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 39)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 39,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 40)
{
    packetType: DATA,
    seqNum: 40,
    data: packets, after which the other side can start sending packets.  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 40)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 40,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 41)
{
    packetType: DATA,
    seqNum: 41,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 41)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 41,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 42)
{
    packetType: DATA,
    seqNum: 42,
    data: • The following structure depicts a suggested packet format (C example): ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 42)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 42,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 43)
{
    packetType: DATA,
    seqNum: 43,
    data: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 43)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 43,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 44)
{
    packetType: DATA,
    seqNum: 44,
    data: struct packet  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 44)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 44,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] received DATA (seqNum: 45)
{
    packetType: DATA,
    seqNum: 45,
    data: { ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:46] sent ACK packet (ackNum: 45)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 45,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] received DATA (seqNum: 46)
{
    packetType: DATA,
    seqNum: 46,
    data: int PacketType; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] sent ACK packet (ackNum: 46)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 46,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] received DATA (seqNum: 47)
{
    packetType: DATA,
    seqNum: 47,
    data: int SeqNum; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] sent ACK packet (ackNum: 47)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 47,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] received DATA (seqNum: 48)
{
    packetType: DATA,
    seqNum: 48,
    data: char data[PayloadLen]; ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:47] sent ACK packet (ackNum: 48)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 48,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] received DATA (seqNum: 49)
{
    packetType: DATA,
    seqNum: 49,
    data: int WindowSize;  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] sent ACK packet (ackNum: 49)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 49,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] received DATA (seqNum: 50)
{
    packetType: DATA,
    seqNum: 50,
    data: int AckNum; ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] sent ACK packet (ackNum: 50)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 50,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] received DATA (seqNum: 51)
{
    packetType: DATA,
    seqNum: 51,
    data: } ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:48] sent ACK packet (ackNum: 51)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 51,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 52)
{
    packetType: DATA,
    seqNum: 52,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 52)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 52,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 53)
{
    packetType: DATA,
    seqNum: 53,
    data: • The PacketType field indicates the type (numeric code) of the packet, i.e., ACK or ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 53)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 53,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 54)
{
    packetType: DATA,
    seqNum: 54,
    data: Data or EOT.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 54)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 54,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 55)
{
    packetType: DATA,
    seqNum: 55,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 55)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 55,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 56)
{
    packetType: DATA,
    seqNum: 56,
    data: • The SeqNum field is a sequence number used to number data packets. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 56)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 56,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 57)
{
    packetType: DATA,
    seqNum: 57,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 57)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 57,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 58)
{
    packetType: DATA,
    seqNum: 58,
    data: • The AckNum field is used to indicate the previous data packet data packet being ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 58)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 58,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 59)
{
    packetType: DATA,
    seqNum: 59,
    data: acknowledged and the next expected sequence number.   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 59)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 59,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] received DATA (seqNum: 60)
{
    packetType: DATA,
    seqNum: 60,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:49] sent ACK packet (ackNum: 60)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 60,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 61)
{
    packetType: DATA,
    seqNum: 61,
    data: • The WindowSize field would typically be used at the start of the session to establish ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 61)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 61,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 62)
{
    packetType: DATA,
    seqNum: 62,
    data: the number of packets that will be sent from the transmitter to the receiver.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 62)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 62,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 63)
{
    packetType: DATA,
    seqNum: 63,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 63)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 63,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 64)
{
    packetType: DATA,
    seqNum: 64,
    data: Constraints ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 64)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 64,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 65)
{
    packetType: DATA,
    seqNum: 65,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 65)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 65,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 66)
{
    packetType: DATA,
    seqNum: 66,
    data: • The basic protocol is Send-and-Wait, however it is a modified version in that it will use ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 66)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 66,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 67)
{
    packetType: DATA,
    seqNum: 67,
    data: a sliding window to send multiple frames rather than single frames. You will still have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 67)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 67,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] received DATA (seqNum: 68)
{
    packetType: DATA,
    seqNum: 68,
    data: to implement a timer to wait for ACKs or to initiate a retransmission in the case of a ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:50] sent ACK packet (ackNum: 68)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 68,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 69)
{
    packetType: DATA,
    seqNum: 69,
    data: no response for each frame in the window.,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 69)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 69,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 70)
{
    packetType: DATA,
    seqNum: 70,
    data:    ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 70)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 70,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 71)
{
    packetType: DATA,
    seqNum: 71,
    data: • Your window will slide forward with each ACK received, until all of the frames in the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 71)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 71,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 72)
{
    packetType: DATA,
    seqNum: 72,
    data: current window have been ACK’d.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 72)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 72,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 73)
{
    packetType: DATA,
    seqNum: 73,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 73)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 73,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 74)
{
    packetType: DATA,
    seqNum: 74,
    data: • Both the transmitter and receiver will print out ongoing the session as simple text ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 74)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 74,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] received DATA (seqNum: 75)
{
    packetType: DATA,
    seqNum: 75,
    data: lines containing the type of packet sent, type of packet received, the status of the ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:53] sent ACK packet (ackNum: 75)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 75,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 76)
{
    packetType: DATA,
    seqNum: 76,
    data: window, sequence numbers, etc. The format of this display will be left up to you.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 76)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 76,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 77)
{
    packetType: DATA,
    seqNum: 77,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 77)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 77,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 78)
{
    packetType: DATA,
    seqNum: 78,
    data: • Your application will maintain a log file at both the transmitter and the receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 78)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 78,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 79)
{
    packetType: DATA,
    seqNum: 79,
    data: This can be used for both troubleshooting and for validating your protocol.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 79)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 79,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 80)
{
    packetType: DATA,
    seqNum: 80,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 80)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 80,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 81)
{
    packetType: DATA,
    seqNum: 81,
    data: • Your network module will take arguments such as the BER (Bit Error Rate), average ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 81)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 81,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 82)
{
    packetType: DATA,
    seqNum: 82,
    data: delay per packet, and will also have a configuration file specifying IP addresses and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 82)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 82,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 83)
{
    packetType: DATA,
    seqNum: 83,
    data: port numbers for the transmitter and receiver. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 83)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 83,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] received DATA (seqNum: 84)
{
    packetType: DATA,
    seqNum: 84,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:54] sent ACK packet (ackNum: 84)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 84,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] received DATA (seqNum: 85)
{
    packetType: DATA,
    seqNum: 85,
    data: • You are required to submit an extensive test document complete with screen shots, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] sent ACK packet (ackNum: 85)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 85,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] received DATA (seqNum: 87)
{
    packetType: DATA,
    seqNum: 87,
    data: implemented. Examples are successful transactions, retransmissions, timeouts, etc.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] sent ACK packet (ackNum: 87)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 87,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] received DATA (seqNum: 88)
{
    packetType: DATA,
    seqNum: 88,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:55] sent ACK packet (ackNum: 88)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 88,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 86)
{
    packetType: DATA,
    seqNum: 86,
    data: videos, and packet captures validating all of the protocol characteristics you have ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 86)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 86,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 89)
{
    packetType: DATA,
    seqNum: 89,
    data: • As part of this project you will provide a protocol design document (separate from ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 89)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 89,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 90)
{
    packetType: DATA,
    seqNum: 90,
    data: the application design document), which will clearly describe your Send-And-Wait ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 90)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 90,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 91)
{
    packetType: DATA,
    seqNum: 91,
    data: protocol using FSMs and technical descriptions of each state shown. Use the ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 91)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 91,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 92)
{
    packetType: DATA,
    seqNum: 92,
    data: approach presented in your textbook (rdt protocol). ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 92)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 92,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] received DATA (seqNum: 93)
{
    packetType: DATA,
    seqNum: 93,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:58] sent ACK packet (ackNum: 93)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 93,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 94)
{
    packetType: DATA,
    seqNum: 94,
    data: • Lastly, I have kept the project itself fairly open-ended to allow you to be as creative ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 94)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 94,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 95)
{
    packetType: DATA,
    seqNum: 95,
    data: as you wish. In other words other than the half-duplex, multiple packet ARQ ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 95)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 95,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 97)
{
    packetType: DATA,
    seqNum: 97,
    data: your own implementation method. As always if have ideas on how you will like to ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 97)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 97,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 98)
{
    packetType: DATA,
    seqNum: 98,
    data: implement this by all means discuss it with me in class.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 98)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 98,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] received DATA (seqNum: 99)
{
    packetType: DATA,
    seqNum: 99,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:20:59] sent ACK packet (ackNum: 99)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 99,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 96)
{
    packetType: DATA,
    seqNum: 96,
    data: protocol requirement I am quite flexible in allowing you to add features and choose ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 96)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 96,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 100)
{
    packetType: DATA,
    seqNum: 100,
    data: • Bonus marks will be awarded for implementations that show creativity and ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 100)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 100,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 101)
{
    packetType: DATA,
    seqNum: 101,
    data: imagination.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 101)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 101,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 102)
{
    packetType: DATA,
    seqNum: 102,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 102)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 102,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 103)
{
    packetType: DATA,
    seqNum: 103,
    data: Demo Requirements: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 103)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 103,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 104)
{
    packetType: DATA,
    seqNum: 104,
    data: • You will be required to demonstrate your complete application using videos on all ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 104)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 104,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 105)
{
    packetType: DATA,
    seqNum: 105,
    data: three machines.  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 105)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 105,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 106)
{
    packetType: DATA,
    seqNum: 106,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 106)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 106,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 107)
{
    packetType: DATA,
    seqNum: 107,
    data: • The demo video, which covers each one of your test cases. In other words, it will be ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 107)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 107,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 108)
{
    packetType: DATA,
    seqNum: 108,
    data: similar to the live lab demo except you will be preparing a video of each test as ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 108)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 108,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 109)
{
    packetType: DATA,
    seqNum: 109,
    data: opposed to me standing beside you observing each test.   ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 109)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 109,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] received DATA (seqNum: 110)
{
    packetType: DATA,
    seqNum: 110,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:2] sent ACK packet (ackNum: 110)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 110,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 111)
{
    packetType: DATA,
    seqNum: 111,
    data: • Also, make sure you have packet captures at all three machines for each test. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 111)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 111,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 112)
{
    packetType: DATA,
    seqNum: 112,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 112)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 112,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 113)
{
    packetType: DATA,
    seqNum: 113,
    data: To Be Submitted Electronically: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 113)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 113,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 114)
{
    packetType: DATA,
    seqNum: 114,
    data: • As part of your submission, also submit demo videos of your application (see above). ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 114)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 114,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 115)
{
    packetType: DATA,
    seqNum: 115,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 115)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 115,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 116)
{
    packetType: DATA,
    seqNum: 116,
    data: • Capture all network traffic related to your application on all three machines and ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 116)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 116,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 117)
{
    packetType: DATA,
    seqNum: 117,
    data: submit them as part of your package. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 117)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 117,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 118)
{
    packetType: DATA,
    seqNum: 118,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 118)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 118,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 119)
{
    packetType: DATA,
    seqNum: 119,
    data: • Submit a zip file containing all the code, videos, packet captures, and documents as ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 119)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 119,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 121)
{
    packetType: DATA,
    seqNum: 121,
    data:   ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 121)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 121,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 122)
{
    packetType: DATA,
    seqNum: 122,
    data: • Hand in complete and well-documented application design work, protocol design, ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 122)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 122,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 123)
{
    packetType: DATA,
    seqNum: 123,
    data: and test documents in PDF format.  ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 123)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 123,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 124)
{
    packetType: DATA,
    seqNum: 124,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 124)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 124,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 125)
{
    packetType: DATA,
    seqNum: 125,
    data: • Also, provide all your source code and an executable. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 125)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 125,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 126)
{
    packetType: DATA,
    seqNum: 126,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 126)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 126,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 127)
{
    packetType: DATA,
    seqNum: 127,
    data: • The zip package must follow the following directory structure: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 127)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 127,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 128)
{
    packetType: DATA,
    seqNum: 128,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 128)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 128,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 129)
{
    packetType: DATA,
    seqNum: 129,
    data: ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 129)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 129,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] received DATA (seqNum: 130)
{
    packetType: DATA,
    seqNum: 130,
    data: 1. Documents: will contain all the specified documents in PDF format. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:3] sent ACK packet (ackNum: 130)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 130,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 120)
{
    packetType: DATA,
    seqNum: 120,
    data: described, in the sharein folder for this course under “Final Project-FT”. ,
    windowSize: 20,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 120)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 20,
    ackNum: 120,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 132)
{
    packetType: DATA,
    seqNum: 132,
    data: 3. Videos: All of the demo videos ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 132)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 132,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 133)
{
    packetType: DATA,
    seqNum: 133,
    data: 4. Packet Captures: Packet captures as specified above ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 133)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 133,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 134)
{
    packetType: DATA,
    seqNum: 134,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 134)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 134,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 135)
{
    packetType: DATA,
    seqNum: 135,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 135)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 135,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 136)
{
    packetType: DATA,
    seqNum: 136,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 136)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 136,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 137)
{
    packetType: DATA,
    seqNum: 137,
    data: • Your zipped package will be labelled as follows: FirstName_LastName-,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 137)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 137,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 138)
{
    packetType: DATA,
    seqNum: 138,
    data: StudentID.zip. ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 138)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 138,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 139)
{
    packetType: DATA,
    seqNum: 139,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 139)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 139,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 140)
{
    packetType: DATA,
    seqNum: 140,
    data:  ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 140)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 140,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:5] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-4 9:21:6] received DATA (seqNum: 131)
{
    packetType: DATA,
    seqNum: 131,
    data: 2. Source: All of the source code ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:21:6] sent ACK packet (ackNum: 131)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 131,
    retransmit: false,
}
[INFO][2020-12-4 9:21:6] received DATA (seqNum: 141)
{
    packetType: DATA,
    seqNum: 141,
    data: ,
    windowSize: 11,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:21:6] sent ACK packet (ackNum: 141)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 11,
    ackNum: 141,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 142)
{
    packetType: DATA,
    seqNum: 142,
    data: Marking Guide: ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 142)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 142,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 143)
{
    packetType: DATA,
    seqNum: 143,
    data:  ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 143)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 143,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 144)
{
    packetType: DATA,
    seqNum: 144,
    data: Design work and Report: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 144)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 144,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 145)
{
    packetType: DATA,
    seqNum: 145,
    data: Protocol Design: 10 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 145)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 145,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 147)
{
    packetType: DATA,
    seqNum: 147,
    data: Protocol Functionality: 60 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 147)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 147,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 148)
{
    packetType: DATA,
    seqNum: 148,
    data:  ----- ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 148)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 148,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 149)
{
    packetType: DATA,
    seqNum: 149,
    data:  Total: 100,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 149)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 149,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] received DATA (seqNum: 150)
{
    packetType: DATA,
    seqNum: 150,
    data: END ,
    windowSize: 12,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:7] sent ACK packet (ackNum: 150)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 150,
    retransmit: false,
}
[INFO][2020-12-4 9:21:9] received DATA (seqNum: 146)
{
    packetType: DATA,
    seqNum: 146,
    data: Test Document: 15 ,
    windowSize: 12,
    ackNum: 0,
    retransmit: true,
}
[INFO][2020-12-4 9:21:9] sent ACK packet (ackNum: 146)
{
    packetType: ACK,
    seqNum: 0,
    data: (null),
    windowSize: 12,
    ackNum: 146,
    retransmit: false,
}
[INFO][2020-12-4 9:21:9] received EOT packet
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
[INFO][2020-12-4 9:21:9] terminating receiver...
{
    packetType: EOT,
    seqNum: 0,
    data: (null),
    windowSize: 0,
    ackNum: 0,
    retransmit: false,
}
